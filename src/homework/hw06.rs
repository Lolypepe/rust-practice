use std::env; // Імпортуємо модуль для роботи з аргументами командного рядка

// Функція для малювання одного трикутника заданої висоти та максимальної ширини всієї ялинки
fn draw_triangle(height: usize, max_width: usize) {
    for i in 0..height {
        let stars = 2 * i + 1; // Кількість зірочок у поточному рядку
        let spaces = (max_width - stars) / 2; // Кількість пробілів зліва для центрування
        print!("{}", " ".repeat(spaces)); // Друкуємо пробіли зліва
        print!("{}", "*".repeat(stars)); // Друкуємо зірочки
        println!("{}", " ".repeat(spaces + (max_width - stars) % 2)); // Друкуємо пробіли справа (враховуємо непарну ширину) та переходимо на новий рядок
    }
}

// Функція для малювання стовбура ялинки заданої ширини та максимальної ширини всієї ялинки
fn draw_trunk(trunk_width: usize, max_width: usize) {
    let spaces = (max_width - trunk_width) / 2; // Кількість пробілів зліва для центрування стовбура
    for _ in 0..2 { // Малюємо дві лінії стовбура
        print!("{}", " ".repeat(spaces)); // Друкуємо пробіли зліва
        print!("{}", "*".repeat(trunk_width)); // Друкуємо зірочки для стовбура
        println!("{}", " ".repeat(spaces + (max_width - trunk_width) % 2)); // Друкуємо пробіли справа та переходимо на новий рядок
    }
}

fn main() {
    let args: Vec<String> = env::args().collect(); // Збираємо аргументи командного рядка у вектор

    // Визначаємо кількість трикутників. Якщо аргумент передано, парсимо його, інакше використовуємо значення за замовчуванням (4)
    let num_triangles = if args.len() > 1 {
        args[1].parse::<usize>().unwrap_or(4)
    } else {
        4
    };

    // Визначаємо максимальну висоту ялинки (кількість трикутників)
    let max_triangle_height = num_triangles;
    // Визначаємо максимальну ширину основи останнього трикутника, яка буде максимальною шириною всієї ялинки
    let max_width = 2 * (max_triangle_height - 1) + 1;
    // Задаємо фіксовану ширину стовбура
    let trunk_width = 3;

    let mut current_height = 1; // Початкова висота першого трикутника

    // Цикл для малювання кожного трикутника
    for _ in 0..num_triangles {
        draw_triangle(current_height, max_width); // Викликаємо функцію для малювання поточного трикутника
        current_height += 1; // Збільшуємо висоту для наступного трикутника
    }

    // Малюємо стовбур ялинки після всіх трикутників
    draw_trunk(trunk_width, max_width);
}
