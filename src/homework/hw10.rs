// Функція для перевірки, чи є задане беззнакове 32-бітне ціле число паліндромом.
fn is_palindrome(x: u32) -> bool {
    // Одноцифрові числа завжди є паліндромами.
    if x < 10 {
        return true;
    }
    // Перетворюємо число на рядок для зручного порівняння.
    let s = x.to_string();
    // Створюємо реверсовану версію рядка.
    let reversed_s: String = s.chars().rev().collect();
    // Порівнюємо оригінальний рядок з реверсованим. Якщо вони однакові, число є паліндромом.
    s == reversed_s
}

// Модуль з тестовими функціями.
#[cfg(test)]
mod tests {
    // Імпортуємо все з зовнішнього модуля (hw10).
    use super::*;

    // Тестова функція для перевірки роботи is_palindrome.
    #[test]
    fn test() {
        // Масив тестових даних, де кожен елемент є кортежем (число, очікуваний_результат).
        let data =
            [
                (123, false), // 123 не є паліндромом.
                (121, true),  // 121 є паліндромом.
                (1221, true), // 1221 є паліндромом.
            ];

        // Ітеруємося по тестових даних та для кожного випадку перевіряємо,
        // чи результат виклику is_palindrome для заданого числа відповідає очікуваному результату.
        data
            .iter()
            .for_each(|(n, exp)| {
                assert_eq!(is_palindrome(*n), *exp);
            });
    }
}

// Головна функція (не обов'язкова для виконання завдання, але демонструє використання).
fn main() {
    let numbers_to_test = [123, 121, 1221, 5, 55, 12345];
    for num in numbers_to_test {
        if is_palindrome(num) {
            println!("{} є паліндромом.", num);
        } else {
            println!("{} не є паліндромом.", num);
        }
    }
}
